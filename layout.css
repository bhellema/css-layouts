@layer reset, theme, layout;

@layer reset {
    *,
    *::before,
    *::after {
        box-sizing: border-box;
    }
}

@layer theme {
    :root {
        --layout-fluid-min: 35ch;
        --layout-default-repeat: 3;
        --layout-default-gap: 20px;
    }
}

@layer layout {
    /* grid container with three equally sized columns that take up one fraction (1fr)
       of the available space with a gap */
    .repeating-grid {
        --_grid-repeat: var(--grid-repeat, var(--layout-default-repeat));
        --_repeating-grid-gap: var(--grid-gap, var(--layout-default-gap));
        display: grid;
        grid-template-columns: repeat(var(--_grid-repeat), 1fr);
        gap: var(--_repeating-grid-gap);
    }

    .repeating-flex {
        --_flex-repeat: var(--flex-repeat, var(--layout-default-repeat));
        --_repeating-flex-gap: var(--flex-gap, var(--layout-default-gap));
        --_gap-count: calc(var(--_flex-repeat) - 1);
        --_gap-repeater-calc: calc(
                var(--_repeating-flex-gap) / var(--_flex-repeat) * var(--_gap-count)
        );
        display: flex;
        flex-wrap: wrap;
        gap: var(--_repeating-flex-gap);

        > * {
            flex: 1 1 calc((100% / var(--_flex-repeat)) - var(--_gap-repeater-calc));
        }
    }

    .fluid-grid {
        --_fluid-grid-min: var(--fluid-grid-min, var(--layout-fluid-min));
        --_fluid-grid-gap: var(--grid-gap, var(--layout-default-gap));
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(min(var(--_fluid-grid-min), 100%), 1fr));
        gap: var(--_fluid-grid-gap);
    }

    .fluid-flex {
        --_fluid-flex-min: var(--fluid-flex-min, var(--layout-fluid-min));
        --_fluid-flex-gap: var(--flex-gap, var(--layout-default-gap));

        display: flex;
        flex-wrap: wrap;
        gap: var(--_fluid-flex-gap);

        > * {
            flex: 1 1 var(--_fluid-flex-min);
        }
    }

    .subgrid-rows {
        &:has(> :nth-child(1):last-child) { --subgrid-rows: 1; }
        &:has(> :nth-child(2):last-child) { --subgrid-rows: 2; }
        &:has(> :nth-child(3):last-child) { --subgrid-rows: 3; }
        &:has(> :nth-child(4):last-child) { --subgrid-rows: 4; }
        &:has(> :nth-child(5):last-child) { --subgrid-rows: 5; }
        /* etc. */

        > * {
            display: grid;
            gap: var(--subgrid-gap, 0);
            grid-row: auto / span var(--subgrid-rows, 5);
            grid-template-rows: subgrid;
        }

        :is(.fluid-grid:not(.subgrid-rows),
            .repeating-grid:not(.subgrid-rows),
            .repeating-flex,
            .fluid-flex) {
                > * {
                    container: var(--grid-item-container, grid-item) / inline-size;
                }
            }
    }

    .subgrid-cols {
        display: flex;
        overflow: hidden;
        gap: var(--subgrid-gap, 0);
        > * {
            flex: 1;
        }
    }
}


@layer demo {
    .demo .products-grid  * {
        aspect-ratio: 2 / 1;
        border: 1px dashed black;
        padding: 2px
    }

    .demo .products-grid {
        --grid-repeat: 4;
        --grid-gap: 2vw;
        --subgrid-gap: 5px;

        @media (width <= 1000px) {
            --grid-repeat: 3;
            --grid-gap: 3vw;
        }

        @media (width <= 800px) {
            --grid-repeat: 2;
            --grid-gap: 4vw;
        }
    }

}
